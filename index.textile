%%%%%%%%%%%%%%%%%%%
%% Start off with some headers

Title: Git Crash Course
Author: Paul Groudas

%%%%%%%%%%%%%%%%%%
%% Styles

%css
body { font-family: Helvetica; }

h1, h2, h3 { color:#455671; }

h1 { text-align: center; }

a:link, a:visited { color: black; }

.slide h1 { font-size: 40pt;  }

.slide h1 {  text-align: center; }

.slide h1.fullscreen { position: absolute;
                       top: 40%;
                       width: 100%; }

/* lets you create slides with no heading (because heading is hidden but gets included in toc) */

.slide h1.hidden     { display: none; }

.slide h2 { font-size: 35pt;  }

h3 { font-size: 25pt;  }

p, li, dt, dd, td, th { font-size: 23pt; }

ul { list-style-type: circle; }

pre {
  background-color: white;
  border: 2px solid #B05000;
  padding: 10px;
}

div.code {
  background-color: white;
  border: 2px solid #B05000;
  padding: 10px; 
}

div.code pre {
  background-color: white; 
  border: 0;
  padding: 5px;
}

%end

h1. Git @ Intent Media

p=. !images/octocat.png!


h1. Agenda
* Git Basics
* Everyday Git with Intellij
* Advanced Usages

h1. Git Basics

h3. What is Git?

* Git is a *Distributed* Version Control System
** This means the entire history is not only on GitHub but also on everyone's machine.
** This also means that _commiting_ your changes and _pushing_ them are two different things.

h1. Git Basics

h3. Checking out the code

bc. $ git clone git@github.com:intentmedia/code.git
Initialized empty Git repository in /home/pj/Code/IM/data/.git/
remote: Counting objects: 738, done.
remote: Compressing objects: 100% (396/396), done.
remote: Total 738 (delta 336), reused 680 (delta 279)
Receiving objects: 100% (738/738), 177.44 KiB, done.
Resolving deltas: 100% (336/336), done.
$

h1. Git Basics

h3. Checking out the code - Intellij

p=. !{width:80%;}images/intellij_checkout.png!

h1. Git Basics

h3. Checking in your changes

bc. $ echo 'Adding this to the README' >> README
$ git add README
$ git commit --message 'This is an example of a commit'
$ git push
Counting objects: 5, done.
Delta compression using up to 6 threads.
Compressing objects: 100% (2/2), done.
Writing objects: 100% (3/3), 313 bytes, done.
Total 3 (delta 1), reused 0 (delta 0)
To git@github.com:pgroudas/git_preso.git
   23cc04d..e076226  gh-pages -> gh-pages

h1. Git Basics

h3. Checking in your changes - Intellij ⌘+k

p=. !{width:80%;}images/intellij_commit.png!

h1. Git Basics

h3. Checking in your changes - Intellij ⌘+k

p=. !{width:80%;}images/intellij_rebase_and_push.png!

h1. Git Basics

h3. Pushing your changes - Intellij

p=. !{width:80%;}images/intellij_push.png!

h1. Git Basics

h3. Pulling the latest upstream changes

h4. Working tree must be clean!

bc. $ git pull --rebase
First, rewinding head to replay your work on top of it...
Fast-forwarded master to db46daeff68ab4d58283cc5f504baceb7193a4fa.

h1. Git Basics

h3. Pulling the latest upstream changes - Intelij ⌘+t

h4. Handles your unclean working tree for you!

p=. !{width:80%;}images/intellij_update.png!


h1. Git Basics

h3. Rebasing[1]

table{width:100%;}.
|_. Before            |_. After             |
| !images/before.png!  | !images/rebase.png!  |

fn1. "http://book.git-scm.com/4_rebasing.html":http://book.git-scm.com/4_rebasing.html 

h1. Git Basics

h3. Merge[2]

table{width:100%;}.
|_. Before            |_. After             |
| !images/before.png!  | !images/merge.png!  |

fn2. "http://book.git-scm.com/3_basic_branching_and_merging.html":http://book.git-scm.com/3_basic_branching_and_merging.html

h1. Everyday Git with Intellij

p. Update code frequently with *⌘+t* and select *Rebase* update type
* This keeps a linear and simple revision history that is easy to understand

p. Commit with *⌘+k* and you generally want to push at the same time
* If it prompts you saying that you are behind, select rebase and push

h1. What to do if something goes wrong?

p. Most common problems occur while pulling down upstream changes
* Check the Version Control Console for detailed output

p=. !{width:80%;}images/intellij_version_control_console.png!

h1. What to do if something goes wrong?

p. Just like any version control system, if multiple users are editing the same files, occasionally you have to resolve conflicts.  Intellij is actually pretty sane about dealing with conflicts and prompts you to resolve them when you update.

p=. !{width:60%;}images/intellij_resolve_conflict.png!

p=. !{width:60%;}images/intellij_merge_tool.png!

h1. What to do if something goes wrong?

h3. You can always revert to the state prior to the rebase operation if you mess up the merge.

* Type @git rebase --abort@ at the command line 
* _Version Control_ > _Git_ > _Abort Rebasing_ in Intellij menu

h3. You can also use Intellij's merge tool to solve problems you get yourself into on the command line

bc.. pj@onslaught:~/Code/IM/code$ git pull --rebase
First, rewinding head to replay your work on top of it...
Applying: PJ:  This is a test commit
Using index info to reconstruct a base tree...
Falling back to patching base and 3-way merge...
Auto-merging adServer/config/production.properties
CONFLICT (content): Merge conflict in adServer/config/production.properties
Failed to merge in the changes.
Patch failed at 0001 PJ:  This is a test commit

When you have resolved this problem run "git rebase --continue".
If you would prefer to skip this patch, instead run "git rebase --skip".
To restore the original branch and stop rebasing run "git rebase --abort".

p. Merge tool is accessible via _Version Control_ > _Git_ > _Merge Tool_


h1. Agenda
* -Git Basics-
* -Everyday Git with Intellij-
* Advanced Usages

h1. If you ever need help

* "Campfire":https://intent-media.campfirenow.com/
* "Intellij Git Integration":http://www.jetbrains.com/idea/webhelp/using-git-integration.html
* "github:help":http://help.github.com/
* "git community book":http://book.git-scm.com/
* git man pages available via @git help@ command in terminal
